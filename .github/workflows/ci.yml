name: CI

on:
    push:
        branches: ["main"]
        tags: ["v*"]
    pull_request:
        branches: ["main"]

jobs:
    build-test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:16
                ports: ["5432:5432"]
                env:
                    POSTGRES_USER: fink
                    POSTGRES_PASSWORD: fink
                    POSTGRES_DB: fink
                options: >-
                    --health-cmd="pg_isready -U fink -d fink"
                    --health-interval=5s
                    --health-timeout=3s
                    --health-retries=20

        env:
            # Point app & alembic to CI Postgres
            DATABASE_URL: postgresql+asyncpg://fink:fink@localhost:5432/fink
            # Keep tests quiet (no table auto-create at startup in prod mode)
            ENVIRONMENT: production
            DEBUG: "false"
            PYTHONUNBUFFERED: "1"

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python
              id: set-python-version
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install system deps
              run: |
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends build-essential

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true

            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v4
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ steps.set-python-version.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

            - name: Install dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root

            - name: Install project
              run: poetry install --no-interaction

            - name: Wait for Postgres
              run: |
                  for i in {1..60}; do
                    pg_isready -h localhost -p 5432 -U fink -d fink && break
                    sleep 1
                  done

            - name: Lint (Ruff)
              run: poetry run ruff check app

            - name: Format check (Black)
              run: poetry run black --check app

            - name: Type check (MyPy)
              run: poetry run mypy app

            - name: Alembic upgrade
              run: poetry run alembic upgrade head

            - name: Tests (Pytest)
              run: poetry run pytest --cov-report=xml

            - name: Upload coverage artifact
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-xml
                  path: coverage.xml
